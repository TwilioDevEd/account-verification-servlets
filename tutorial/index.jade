.chapter(data-title='Account Verification Servlets')
  .step(data-title='Introduction', data-file='src/main/webapp/WEB-INF/web.xml')
    :markdown
      ## Introduction

      Ready to implement user account verification in your application? Here's how it works at a high level:

      1. The users begin the registration process by entering their data, including a phone number, into a signup form.

      1. The authentication system sends a one-time password to the user's mobile phone to verify the possession of that phone number.

      1. The user enters the one-time password into a form before completing registration.

      1. The user opens a success page and receives an SMS indicating that his/her account has been created.

      ## Building Blocks

      To get this done, you'll be working with the following Twilio-powered APIs:

      **Authy REST API**

      * [Authy Docs](//docs.authy.com/): Find quick starts, documentation, and all about the helper libraries.

      **Twilio REST API**

      * [Messages Resource](//www.twilio.com/docs/api/rest/sending-messages): We
      will use Twilio directly to send our user a confirmation message after they
      create an account.

      Let's get started! Click the right arrow to move on to the next step of the tutorial.

  .step(data-title='User Model', data-file='src/main/java/com/twilio/verification/model/User.java', data-highlight='7-37')
    :markdown
      ## The User Model

      The User Model for this use-case is pretty straightforward and JPA
      offers us some tools to make it even simpler. If you have already read
      through the [2FA tutorial](//www.twilio.com/docs/tutorials/walkthrough/two-factor-authentication/java/servlets)
      this one probably looks very similar.

  .step(data-title='New User Form', data-file='src/main/java/com/twilio/verification/servlet/RegistrationServlet.java', data-highlight='36-65')
    :markdown
      ## New User Form

      When we create a new user, we ask for a name, e-mail address, and a password.
      In order to validate their account we also ask them for a mobile number
      with a country code. We use Authy to send them a one-time password via SMS
      to this phone number.

      It is now the servlet's responsibility to verify that the user provides
      the necessary information to create a new user. If the user is created successfully,
      he/she will be logged into the system automatically.

      Now the user is logged in but not verified. In the next steps we'll
      learn how to verify the user using Authy.

  .step(data-title='Configuring Authy', data-file='src/main/java/com/twilio/verification/servlet/RegistrationServlet.java', data-highlight='15,26')
    :markdown
      ## Configuring Authy

      In `.environment` we list configuration parameters for the application.
      These are pulled from system environment variables, which is a helpful way
      to access sensitive values (like API keys). This prevents us from accidentally
      checking them into source control. We use `System.getenv` method to load
      the key and inject the `AuthyApiClient` into the RegistrationServlet class.

      Now we need our Authy production key ([sign up for Authy
      here](https://dashboard.authy.com/signup)). When you create an Authy
      application the production key is found on the dashboard.

      ![Authy Dashboard](//s3.amazonaws.com/howtodocs/2fa-authy-dashboard.png)

  .step(data-title='Sending a Token on Account Creation', data-file='src/main/java/com/twilio/verification/servlet/RegistrationServlet.java', data-highlight='36-65')
    :markdown
      ## Sending a Token on Account Creation

      Once the user has an `authyId` we can actually send a verification code
      to that user's mobile phone.

      When our user is created successfully, via the form we implemented, we send
      a token to the user's mobile phone to verify their account in our
      servlet. When the code is sent we redirect to another page where the
      user can enter the token they received, therefore completing the verification process.

      Let's check out the code for that next!

      ---

      **See Also:**
      * [Java Client for Authy API](//github.com/authy/authy-java)

  .step(data-title='Verifying the Code', data-file='src/main/java/com/twilio/verification/servlet/VerifyCodeServlet.java', data-highlight='48-73')
    :markdown
      ## Verifying the Code

      This servlet method handles the submission form. It needs to:

      * Get the current user
      * Verify the code that was entered by the user
      * If the code entered was valid, flip a boolean flag on the user model to
        indicate the account was verified

      ## Verifying the Code

      Authy provides us with a `verify()` method that allows us to pass a
      user id and a token. In this case we just need to check that the API request
      was successful and if so, set User's `verified` field to true.

      That's all for token verification! However, our verification form wouldn't be very
      usable if there wasn't a way to resend a verification code if the message
      didn't arrive at the end user's handset.

      ---

      **See Also:**
      * [Java Client for Authy API](//github.com/authy/authy-java)

  .step(data-title='Re-sending The Code', data-file='src/main/java/com/twilio/verification/servlet/ResendTokenServlet.java', data-highlight='36-46')
    :markdown
      ## Re-sending the Code

      Since the form for re-sending the code is one line see the
      [Verification form](//github.com/TwilioDevEd/account-verification-servlets/blob/master/src/main/webapp/verifyCode.jsp#L28-L40).
      We're going to skip that for this tutorial. Let's just look at the servlet.

      This method loads the `user` associated with the request and then
      uses the same Authy API method we used earlier to resend the code.

      To wrap things up, let's implement the last step where we confirm that the
      user's account has been verified with a text message and a success page.

  .step(data-title='Sending the Confirmation Message', data-file='src/main/java/com/twilio/verification/lib/Sender.java', data-highlight='25,28,34-41')
    :markdown
      ## Sending the Confirmation Message

      We create a single instance of the Twilio REST API helper,
      called `client` in this example.

      Then we need get the account, get the `messageFactory` and finally use its `sendMessage` method
      in order to send an SMS to the user's phone.
      For more information on how to send SMS using Twilio's Rest API visit this
      [link](//www.twilio.com/docs/quickstart/java/sms/sending-via-rest).

      ---

      **See Also:**
      * [Twilio Rest API Documentation](https://www.twilio.com/docs/api/rest)
      * [Sending SMS With the API](//www.twilio.com/docs/api/rest/sending-messages)

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it!

      We've just implemented account verification so your users can
      confirm their phone number. If you're a Java developer working with Twilio,
      you might want to check out these other tutorials:

      [**Click-To-Call**](//www.twilio.com/docs/howto/walkthrough/click-to-call/java/servlets)

      Put a button on your web page that connects visitors to live support or sales people via telephone.

      [**Automated Survey**](//www.twilio.com/docs/howto/walkthrough/automated-survey/java/servlets)

      Instantly collect structured data from your users with a survey conducted
      over a voice call or SMS text messages.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
